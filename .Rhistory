VTrStatz[Vtemp0]
VTrStat[Vtemp0]
rm(ls())
rm(as.character(ls())
)
?rm
rm(list=ls())
ls()
MeanParam <- read.csv(file="MeanParam.csv",row.names=1)
Vparam <- MeanParam ;  Setting <- "SouthAfrica"
source("PARAMv5.r")
V1950=dget("V1950.Rdata")
source("TIMESTEPOPTv1.r")
source("TIMESTEPv5.r")
source("TIMESTEPv5.r")
rateMatS=as("RateMatStat","dgCMatrix")
rateMatS=as(RateMatStat,"dgCMatrix")
toMatrix=function(inds,vals,bound) { Mat=sparseMatrix(inds[1:bound,1],inds[1:bound,2],x=vals,dims=c(numComp,numComp); dimnames(Mat)=list(StatNam,StatNam); Mat}
toMatrix=function(inds,vals,bound) { Mat=sparseMatrix(inds[1:bound,1],inds[1:bound,2],x=vals,dims=c(numComp,numComp)); dimnames(Mat)=list(StatNam,StatNam); Mat}
Mat0=toMatrix(J,X,index)
toMatrix=function(inds,vals,bound) { Mat=sparseMatrix(inds[1:bound,1],inds[1:bound,2],x=vals[1:bound],dims=c(numComp,numComp)); dimnames(Mat)=list(StatNam,StatNam); Mat}
Mat0=toMatrix(J,X,index)
identical(Mat0,rateMatS)
Vnext <- Vcurrent# Initializes new vector
Vnext[505] <- 0# Clears out deaths
Vnext[1]<- Vnext[1]+ NewEntt[t]*1000000
t=1; ArtNdCov11=0;
DIAG
Vnext <- Vcurrent# Initializes new vector
Vnext[505] <- 0# Clears out deaths
Vnext[1]<- Vnext[1]+ NewEntt[t]*1000000
Vcurrent <- V1950/sum(V1950)*InitPop[Setting]*10^6
Vnext <- Vcurrent# Initializes new vector
Vnext[505] <- 0# Clears out deaths
Vnext[1]<- Vnext[1]+ NewEntt[t]*1000000
for (z in 1:Nalg) {  # this needs to be for all algorithms z
RateMatStatz<- RateMatStat
TxMat<- get(paste("TxMatAlg",z,sep=""))
### B5. POPULATE MORTALITY RATES 
RateMatStatz[Vtemp6,505] <- RateMatStatz[Vtemp6,505] + 2/TxMat[1,Vtemp6]*rep(c(muIn,muIn,muIp,muIp),70)*TunTxMort# Treatment TB mortality
  RateMatStatz[Vtemp9[101:120],505]<- muTBH# TB-HIV mortality for CD4 350
# Vector of current contact rates...
VTrStatz[Vtemp6]<- (1-TxMat[2,Vtemp6]*TxEft[t])*rep(rep(c(TrIn,TrIn,1,1),5)*rep(RelFit,each=4),14)
# Contact rates for individuals on treatment
assign(paste('VTrStat',z,sep=""),VTrStatz)
### B5. TREATMENT OUTCOMES (Stay in HIV / Resistance subdivisions) 
RateMatStatz[a9]  <-  RateMatStatz[a9] + 12/TxMat[a10]*TxMat[a11]*TxEft[t]   # Cures back to Ls state, treatment experienced subdivision
RateMatStatz[a12] <-  RateMatStatz[a12] + 12/TxMat[a10]*(1-TxEft[t]*TxMat[a11])*pReTx   # Failures identified and reinitiated on treatment, treatment experienced subdivision
RateMatStatz[a13] <-  RateMatStatz[a13] + apply(cbind(0,12/TxMat[a10]*(rep(rep(c(pDeft[t],pDefND),each=35),4)+(1-TxEft[t]*TxMat[a11])*(1-pReTx))-colSums(TxMat[3:8,i2])),1,max)   # Defaulters and failures to active disease
 for(k in 1:6)  { RateMatStatz[a14[,c(1,k+1)]] <- RateMatStatz[a14[,c(1,k+1)]]+TxMat[k+2,i3] }  # Defaulters and failures to active disease with Acquired Resistance
assign(paste("RateMatStat",z,sep=""),RateMatStatz)}
RateMat <- (RateMatStat1*(1-PhaseIn1[t])+RateMatStat2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("RateMatStat",DIAG,sep=""))*PhaseIn2[t]
VTrStat<- (VTrStat1*(1-PhaseIn1[t])+VTrStat2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("VTrStat",DIAG,sep=""))*PhaseIn2[t]
rateMatS=as(RateMat,"dgCMatrix")
VTrStatz[Vtemp6] = (1 - (coeff1 * TxMatAlg1[2,Vtemp6] + coeff2 * TxMatAlg2[2,Vtemp6] + coeff3 * TxMatAlg3[2,Vtemp6])) * TxEft[t] * rep(rep(c(TrIn, TrIn, 1, 1), 5) * rep(RelFit, each=4), 14)
  coeff1 = (1 - PhaseIn1[t]) * (1 - PhaseIn2[t])
  coeff2 =  PhaseIn1[t] * (1 - PhaseIn2[t])
  coeff3 = 0
DIAG
coeff2 = coeff2 + PhaseIn2[t]
VTrStatz[Vtemp6] = (1 - (coeff1 * TxMatAlg1[2,Vtemp6] + coeff2 * TxMatAlg2[2,Vtemp6] + coeff3 * TxMatAlg3[2,Vtemp6])) * TxEft[t] * rep(rep(c(TrIn, TrIn, 1, 1), 5) * rep(RelFit, each=4), 14)
VTrStatz             = rep(0, numComp - 1) # Creates a vector for contact rates
VTrStatz[Vtemp1 + 3] = rep(TrIn*RelFit,14) # Contact rates for smear neg
VTrStatz[Vtemp1 + 4] = rep(RelFit,14) # Contact rates for smear pos
VTrStatz[Vtemp6] = (1 - (coeff1 * TxMatAlg1[2,Vtemp6] + coeff2 * TxMatAlg2[2,Vtemp6] + coeff3 * TxMatAlg3[2,Vtemp6])) * TxEft[t] * rep(rep(c(TrIn, TrIn, 1, 1), 5) * rep(RelFit, each=4), 14)
identical(VTrStat,VTrStatZ)
identical(VTrStat,VTrStatz)
which(VTrStat != VTrStatz)
all(which(VTrStat != VTrStatz) %in% Vtemp6)
length(Vtemp6)
coeff3
VTemp0=Vtemp6[2*(1:10)]
VTrStat1[Vtemp0]
VTrStat1[VTemp0]
VTrStat2[VTemp0]
VTrStat3[VTemp0]
VTrStat[VTemp0]
VTrStatz[VTemp0]
(1-TxMat[2,Vtemp0]*TxEft[t])*(rep(rep(c(TrIn,TrIn,1,1),5)*rep(RelFit,each=4),14)[2*(1:10)])
(1-TxMat[2,VTemp0]*TxEft[t])*(rep(rep(c(TrIn,TrIn,1,1),5)*rep(RelFit,each=4),14)[2*(1:10)])
(1 - (coeff1 * TxMatAlg1[2,VTemp0] + coeff2 * TxMatAlg2[2,VTemp0] + coeff3 * TxMatAlg3[2,VTemp0])) * TxEft[t] * (rep(rep(c(TrIn, TrIn, 1, 1), 5) * rep(RelFit, each=4), 14)[2*(1:10)]
)
identical(TxMat,TxMatAlg3)
identical(TxMatAlg2,TxMatAlg3)
identical(TxMatAlg2[2,VTemp0],TxMatAlg3[2,VTemp0])
identical(TxMatAlg1[2,VTemp0],TxMatAlg3[2,VTemp0])
coeff1+coeff2+coeff3
TxEft[t]
TrIn
RelFit
VTrStatz[Vtemp6] = (1 - (coeff1 * TxMatAlg1[2,Vtemp6] + coeff2 * TxMatAlg2[2,Vtemp6] + coeff3 * TxMatAlg3[2,Vtemp6]) * TxEft[t]) * rep(rep(c(TrIn, TrIn, 1, 1), 5) * rep(RelFit, each=4), 14)
identical(VTrStat,VTrStatZ)
identical(VTrStat,VTrStatz)
  Range = index + 1:length(Vtemp6)
  J[Range,] = cbind(Vtemp6, numComp)
  X[Range] = (coeff1/TxMatAlg1[1,Vtemp6] + coeff2/TxMatAlg2[1,Vtemp6] + coeff3/TxMatAlg3[1,Vtemp6]) * rep(c(muIn,muIn,muIp,muIp),70) * TunTxMort * 2# Treatment TB mortality
  index = tail(Range, 1)
  Range = index + 1:20
  J[Range,] = cbind(Vtemp9[101:120], numComp)
  # Untreated Smear-pos TB mortality
  X[Range] = muTBH - VmuHIV[5] - rep(c(muIn, 0), 10)
  index = tail(Range, 1)
  Range = index + 1:nrow(a9)
  J[Range,] = a9
  # Cures back to Ls state, treatment experienced subdivision
  X[Range] = (coeff1 * TxMatAlg1[a11] / TxMatAlg1[a10] + coeff2 * TxMatAlg2[a11] / TxMatAlg2[a10] + coeff3 * TxMatAlg3[a11] / TxMatAlg3[a10]) * (12/TxEft[t])
  index = tail(Range, 1)
  Range = index + 1:nrow(a12)
  J[Range,] = a12
  # Failures identified and reinitiated on treatment, treatment experienced subdivision
  X[Range] = (coeff1 * (1 - TxEft[t] * TxMatAlg1[a11]) / TxMatAlg1[a10] + coeff2 * (1 - TxEft[t] * TxMatAlg2[a11]) / TxMatAlg2[a10] + coeff3 * (1 - TxEft[t] * TxMatAlg3[a11]) / TxMatAlg3[a10]) * (12*pReTx)
  index = tail(Range, 1)
  Range = index + 1:nrow(a13)
  J[Range,] = a13
  # Defaulters and failures to active disease
  vec1 = apply(cbind(0, 12 / TxMatAlg1[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg1[a11]) * (1-pReTx)) - colSums(TxMatAlg1[3:8, i2])), 1, max)
  vec2 = apply(cbind(0, 12 / TxMatAlg2[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg2[a11]) * (1-pReTx)) - colSums(TxMatAlg2[3:8, i2])), 1, max)
  vec3 = apply(cbind(0, 12 / TxMatAlg3[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg3[a11]) * (1-pReTx)) - colSums(TxMatAlg3[3:8, i2])), 1, max)
  X[Range] = coeff1 * vec1 + coeff2 * vec2 + coeff3 * vec3
  index = tail(Range, 1)
  ### Is there a way to eliminate this loop?
  a14 = a14[1:280,]
  i3  = i3[1:280]
  for (k in 1:6)  {
    Range = index + 1:nrow(a14)
    J[Range,] = a14[, c(1, k + 1)]
    # Defaulters and failures to active disease with Acquired Resistance
    X[Range] = coeff1 * TxMatAlg1[k + 2, i3] + coeff2 * TxMatAlg2[k + 2, i3] + coeff3 * TxMatAlg3[k + 2, i3]
    index = tail(Range, 1)
  }
curMat=toMatrix(J,X,index)
identical(curMat,rateMatS)
length(curMat@i)
length(rateMatS@i)
RateMat <- (RateMatStat1*(1-PhaseIn1[t])+RateMatStat2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("RateMatStat",DIAG,sep=""))*PhaseIn2[t]
rateMatS=as(RateMat,"dgCMatrix")
length(rateMatS@i)
class(curMat)
index
length(unique(J[1:index,])
)
sum(duplicated(J[1:index,]))
index-1164
length(Vtemp6)
V1=rateMatS[Vtemp6,numComp]
V2=curMat[Vtemp6,numComp]
identical(V1,V2)
V1=rateMatS[Vtemp9[101:120], numComp]
V2=curMat[Vtemp9[101:120], numComp]
identical(V1,V2)
V1
V2
muTBH - VmuHIV[5] - rep(c(muIn, 0), 10)
muTBH
fullMat=as.matrix(curMat)
Diff=which(fullMat!=RateMat,arr.ind=TRUE)
dim(Diff)
Diff[1:10,]
2722-2134
length(curMat@x==0)
sum(curMat@x==0)
curMat=as(curMat,"dgCMatrix")
length(curMat@x)
curMatT=as(curMat,"dgTMatrix")
badInds=which(curMatT@x==0)
length(badInds)
curMatT@i=curMatT@i[-badInds]
curMatT@j=curMatT@j[-badInds]
curMatT@x=curMatT@x[-badInds]
curMatR=as(curMatR,"dgCMatrix")
curMatR=as(curMatT,"dgCMatrix")
length(curMatR@x)
identical(curMatR@i,curMatR@j)
identical(curMatR@i,rateMatS@i)
identical(curMatR@p,rateMatS@p)
identical(curMatR@x,rateMatS@x)
which(curMatR@x != rateMatS@x)
index=index-nrow(a12)-nrow(a13)-nrow(a14)*6-nrow(a9)
  Range = index + 1:nrow(a9)
  J[Range,] = a9
  # Cures back to Ls state, treatment experienced subdivision
  X[Range] = (coeff1 * TxMatAlg1[a11] / TxMatAlg1[a10] + coeff2 * TxMatAlg2[a11] / TxMatAlg2[a10] + coeff3 * TxMatAlg3[a11] / TxMatAlg3[a10]) * (12 * TxEft[t])
  index = tail(Range, 1)
pReTx
identical(fullMat[a12],RateMat[a12])
dim(a12)
which(fullMat[a12]!=RateMat[a12])
identical(fullMat[a13],RateMat[a13])
identical(fullMat[a14[,c(1,2)]],RateMat[a14[,c(1,2)]])
identical(fullMat[a14[,c(1,3)]],RateMat[a14[,c(1,3)]])
identical(fullMat[a14[,c(1,4)]],RateMat[a14[,c(1,4)]])
identical(fullMat[a14[,c(1,5)]],RateMat[a14[,c(1,5)]])
identical(fullMat[a14[,c(1,6)]],RateMat[a14[,c(1,6)]])
identical(fullMat[a14[,c(1,7)]],RateMat[a14[,c(1,7)]])
max(!is.na(X))
min(which(is.na(X)))
index=3886
curMat=toMatrix(J,X,index)
dim(a9)
fullMat=as.matrix(curMat)
Diff=which(fullMat!=RateMat,arr.ind=TRUE)
dim(Diff)
430-262
dim(a9)
  J = matrix(NA, numNonZeros, 2)
  X = rep(NA, numNonZeros)
  index = 0
### B1. BREAKDOWN TO ACTIVE DISEASE (Stay in HIV / Resistance / Treatment subdivisions)
  Range = index + 1:nrow(a1)
  J[Range,] = a1
  X[Range] = VrBreakD[j1]*(1-VpToIp[j1])
  index = tail(Range, 1)
  Range = index + 1:nrow(a2)
  J[Range,] = a2
  X[Range] = VrBreakD[j1]*VpToIp[j1]
  index = tail(Range, 1)
### B2. SMEAR NEG CONVERT TO SMEAR POS (Stay in HIV / Resistance / Treatment subdivisions)
  Range = index + 1:nrow(a3)
  J[Range,] = a3
  X[Range] = rNtoP
  index = tail(Range, 1)
### B3. SPONTANEOUS CURE (Stay in HIV / Resistance / Treatment subdivisions)
  Range = index + 1:nrow(a4)
  J[Range,] = a4
  X[Range] = VrIToLs[j1]
  index = tail(Range, 1)
  Range = index + 1:nrow(a5)
  J[Range,] = a5
  X[Range] = VrIToLs[j1]
  index = tail(Range, 1)
### B4. HIV Progression
  Range = index + 1:nrow(a6)
  J[Range,] = a6
  X[Range] = H1toH2
  index = tail(Range, 1)
  Range = index + 1:nrow(a7)
  J[Range,] = a7
  X[Range] = H2toH3
  index = tail(Range, 1)
### B5. POPULATE MORTALITY RATES
  Range = index + 1:nrow(a8)
  J[Range,] = a8
  # HIV mortality
  X[Range] = rep(VmuHIV, each = 72)
  index = tail(Range, 1)
  Range = index + 1:length(Vtemp1)
  J[Range,] = cbind(Vtemp1 + 3, numComp)
  # Untreated Smear-neg TB mortality
  X[Range] = rep(muIn, length(Vtemp1))
  index = tail(Range, 1)
  Range = index + 1:length(Vtemp1)
  J[Range,] = cbind(Vtemp1 + 4, numComp)
  # Untreated Smear-pos TB mortality
  X[Range] = rep(muIp, length(Vtemp1))
  index = tail(Range, 1)
Vnext      = Vcurrent# Initializes new vector                                                                      d
Vnext[numComp] = 0    # Clears out deaths
Vnext[1]   = Vnext[1]+ NewEntt[t]*1000000
  coeff1 = (1 - PhaseIn1[t]) * (1 - PhaseIn2[t])
  coeff2 =  PhaseIn1[t] * (1 - PhaseIn2[t])
  coeff3 = 0
coeff2 = coeff2 + PhaseIn2[t]
  Range = index + 1:length(Vtemp6)
  J[Range,] = cbind(Vtemp6, numComp)
  X[Range] = (coeff1/TxMatAlg1[1,Vtemp6] + coeff2/TxMatAlg2[1,Vtemp6] + coeff3/TxMatAlg3[1,Vtemp6]) * rep(c(muIn,muIn,muIp,muIp),70) * TunTxMort * 2# Treatment TB mortality
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); identical(fullMat[a14[,c(1,2)]],rateMatS[a14[,c(1,2)]])
FullMat=as.matrix(fullMat)
identical(FullMat[cbind(Vtemp6, numComp)],RateMat[cbind(Vtemp6, numComp)])
which(a1[,1] %in% Vtemp9[101:120] & a1[,2] == numComp)
which(a2[,1] %in% Vtemp9[101:120] & a2[,2] == numComp)
which(a3[,1] %in% Vtemp9[101:120] & a3[,2] == numComp)
which(a4[,1] %in% Vtemp9[101:120] & a4[,2] == numComp)
which(a5[,1] %in% Vtemp9[101:120] & a5[,2] == numComp)
which(a6[,1] %in% Vtemp9[101:120] & a6[,2] == numComp)
which(a7[,1] %in% Vtemp9[101:120] & a7[,2] == numComp)
which(a8[,1] %in% Vtemp9[101:120] & a8[,2] == numComp)
72*3
72*4
72*5
VmuHIV
rep(VmuHIV,each=72)[290:356]
which((Vtemp1 + 3) %in% Vtemp9[101:120])
which(Vtemp9[101:120] %in% (Vtemp1 + 3))
muIn
rep(c(muIn, 0), 10)
which(Vtemp9[101:120] %in% (Vtemp1 + 4))
muIp
  Range = index + 1:20
  J[Range,] = cbind(Vtemp9[101:120], numComp)
  # Untreated Smear-pos TB mortality
  X[Range] = muTBH - VmuHIV[5] - rep(c(muIn, muIp), 10)
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); identical(FullMat[cbind(Vtemp9[101:120], numComp)],RateMat[cbind(Vtemp9[101:120], numComp)]
)
length(a9)
all(a9[1:280,1]==a9[-(1:280),1]
)
all(a9[1:280,2]==a9[-(1:280),2]
)
all(a9[1:140,]==a9[141:280,])
all(a9[1:280,]==a9[281:560,])
dim(a9)
all(a9[1:70,]==a9[71:140,])
all(a9[1:56,]==a9[57:112,])
  Range = index + 1:nrow(a9)
  J[Range,] = a9
  # Cures back to Ls state, treatment experienced subdivision - COME BACK AND CHECK!
  X[Range] = (coeff1 * TxMatAlg1[a11] / TxMatAlg1[a10] + coeff2 * TxMatAlg2[a11] / TxMatAlg2[a10] + coeff3 * TxMatAlg3[a11] / TxMatAlg3[a10]) * (12 * TxEft[t])
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); identical(FullMat[a9],RateMat[a9]
)
which(FullMat[a9]!=RateMat[a9])
which((506*a12[,1]+a12[,2]) %in% (506*a9[,1]+a9[,2]))
which((506*a13[,1]+a13[,2]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,2]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,3]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,4]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,5]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,6]) %in% (506*a9[,1]+a9[,2]))
which((506*a14[,1]+a14[,7]) %in% (506*a9[,1]+a9[,2]))
FullMat[a9[4:5]]
RateMat[a9[4:5]]
RateMat[a9[4:5,]]
FullMat[a9[4:5,]]
dim(a9(
))
dim(a9)
FullMat[a9[4:5,]]==RateMat[a9[4:5,]]
all.equal(FullMat[a9[4:5,]],RateMat[a9[4:5,]])
all.equal(FullMat[a9],RateMat[a9])
?all.equal
  Range = index + 1:nrow(a12)
  J[Range,] = a12
  # Failures identified and reinitiated on treatment, treatment experienced subdivision
  # CHECK FOR CORRECTNESS; ORIGINAL CODE HAS 12/TxMat[a10]*(1-TxEft[t]*TxMat[a11])*pReTx
  X[Range] = (coeff1 * (1 - TxEft[t] * TxMatAlg1[a11]) / TxMatAlg1[a10] + coeff2 * (1 - TxEft[t] * TxMatAlg2[a11]) / TxMatAlg2[a10] + coeff3 * (1 - TxEft[t] * TxMatAlg3[a11]) / TxMatAlg3[a10]) * (12*pReTx)
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a12],RateMat[a12])
identical(FullMat[a12],RateMat[a12])
  Range = index + 1:nrow(a13)
  J[Range,] = a13
  # Defaulters and failures to active disease
  vec1 = apply(cbind(0, 12 / TxMatAlg1[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg1[a11]) * (1-pReTx)) - colSums(TxMatAlg1[3:8, i2])), 1, max)
  vec2 = apply(cbind(0, 12 / TxMatAlg2[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg2[a11]) * (1-pReTx)) - colSums(TxMatAlg2[3:8, i2])), 1, max)
  vec3 = apply(cbind(0, 12 / TxMatAlg3[a10] * (rep(rep(c(pDeft[t], pDefND), each=35), 4) + (1 - TxEft[t] * TxMatAlg3[a11]) * (1-pReTx)) - colSums(TxMatAlg3[3:8, i2])), 1, max)
  X[Range] = coeff1 * vec1 + coeff2 * vec2 + coeff3 * vec3
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a13],RateMat[a13])
identical(FullMat[a13],RateMat[a13])
  a14 = a14[1:280,]
  i3  = i3[1:280]
  for (k in 1:6)  {
    Range = index + 1:nrow(a14)
    J[Range,] = a14[, c(1, k + 1)]
    # Defaulters and failures to active disease with Acquired Resistance
    X[Range] = coeff1 * TxMatAlg1[k + 2, i3] + coeff2 * TxMatAlg2[k + 2, i3] + coeff3 * TxMatAlg3[k + 2, i3]
    index = tail(Range, 1)
  }
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat,RateMat)
identical(FullMat,RateMat)
all.equal(fullMat@x, rateMatS@x)
length(badInds)+2134
all.equal(fullMat@x[-badInds], rateMatS@x)
  Range = index + 1:(numComp - 1)
  J[Range,] = cbind(1:(numComp - 1), numComp)
  # Failures identified and reinitiated on treatment, treatment experienced subdivision
  X[Range] = mubt[t]
  index = tail(Range, 1)
RateMat[-505,505]<- RateMat[-505,505]+mubt[t]
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[,numComp],RateMat[,numComp])
VInf <- Vnext[1:504] / sum(Vnext[1:504]) * VTrStatz * CRt[t]# P(meet carrier)*CR|carrier, homogeneous mixing
m <- c(sum(VInf[Vtemp2 + 0 * 7]), sum(VInf[Vtemp2 + 1 * 7]), sum(VInf[Vtemp2 + 2 * 7]), sum(VInf[Vtemp2 + 3 * 7]), sum(VInf[Vtemp2 + 4 * 7]))
  m <- rep(m,14)
length(m)
  Range = index + 1:nrow(a15)
  J[Range,] = a15
  X[Range] = m * (1 - Vpfast[i4])
  index = tail(Range, 1)
  Range = index + 1:nrow(a16)
  J[Range,] = a16
  X[Range] = m * Vpfast[i4] * (1 - VpToIp[i4])
  index = tail(Range, 1)
  Range = index + 1:nrow(a17)
  J[Range,] = a17
  X[Range] = m * Vpfast[i4] * VpToIp[i4]
  index = tail(Range, 1)
RateMat[a15]<- RateMat[a15]+m*(1-Vpfast[i4])
RateMat[a16]<- RateMat[a16]+m*Vpfast[i4]*(1-VpToIp[i4])
RateMat[a17]<- RateMat[a17]+m*Vpfast[i4]*VpToIp[i4]
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a15],RateMat[a15])
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a16],RateMat[a16])
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a17],RateMat[a17])
VSupInf <- VInf*(1-rep(VPartIm,each=72))  # As above, with partial immunity, homogeneous mixing
v <- c(sum(VSupInf[Vtemp2+0*7]),sum(VSupInf[Vtemp2+1*7]),sum(VSupInf[Vtemp2+2*7]),sum(VSupInf[Vtemp2+3*7]),sum(VSupInf[Vtemp2+4*7])); v <- v[rep(rep(1:5,each=5),7*2)]
RateMat[a18]<- RateMat[a18]+v*(1-Vpfast[i5])
RateMat[a19]<- RateMat[a19]+v*Vpfast[i5]*(1-VpToIp[i5])
RateMat[a20]<- RateMat[a20]+v*Vpfast[i5]*VpToIp[i5]
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a18],RateMat[a18]); all.equal(FullMat[a19],RateMat[a19]); all.equal(FullMat[a20],RateMat[a20]);
  Range = index + 1:nrow(a18)
  J[Range,] = a18
  X[Range] = v * (1 - Vpfast[i5])
  index = tail(Range, 1)
  Range = index + 1:nrow(a19)
  J[Range,] = a19
  X[Range] = v * Vpfast[i5] * (1 - VpToIp[i5])
  index = tail(Range, 1)
  Range = index + 1:nrow(a20)
  J[Range,] = a20
  X[Range] = v * Vpfast[i5] * VpToIp[i5]
  index = tail(Range, 1)
fullMat=toMatrix(J,X,index); FullMat=as.matrix(fullMat); all.equal(FullMat[a18],RateMat[a18]); all.equal(FullMat[a19],RateMat[a19]); all.equal(FullMat[a20],RateMat[a20]);
TxMat  = coeff1 * TxMatAlg1 + coeff2 * TxMatAlg2 + coeff3 * TxMatAlg3
TruPosD  = coeff1 * TruPosDAlg1 + coeff2 * TruPosDAlg2 + coeff3 * TruPosDAlg3
FalsPosD= coeff1 * FalsPosDAlg1 + coeff2 * FalsPosDAlg2 + coeff3 * FalsPosDAlg3
TruPosDB= coeff1 * TruPosDAlgB1 + coeff2 * TruPosDAlgB2 + coeff3 * TruPosDAlgB3
FalsPosDB= coeff1 * FalsPosDAlgB1 + coeff2 * FalsPosDAlgB2 + coeff3 * FalsPosDAlgB3
VTestCostD= coeff1 * VTestCostD1 + coeff2 * VTestCostD2 + coeff3 * VTestCostD3
VTxCost   = coeff1 * VTxCost1 + coeff2 * VTxCost2 + coeff3 * VTxCost3
GetXpt  = coeff1 * GetXpt1 + coeff2 * GetXpt2 + coeff3 * GetXpt3
TxMat == (TxMatAlg1*(1-PhaseIn1[t])+TxMatAlg2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("TxMatAlg",DIAG,sep=""))*PhaseIn2[t]
all.equal(TxMat, (TxMatAlg1*(1-PhaseIn1[t])+TxMatAlg2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("TxMatAlg",DIAG,sep=""))*PhaseIn2[t])
all.equal(TruPosD,(TruPosDAlg1*(1-PhaseIn1[t])+TruPosDAlg2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("TruPosDAlg",DIAG,sep=""))*PhaseIn2[t])
all.equal(FalsPosD, (FalsPosDAlg1*(1-PhaseIn1[t])+FalsPosDAlg2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("FalsPosDAlg",DIAG,sep=""))*PhaseIn2[t])
all.equal(TruPosDB, (TruPosDAlgB1*(1-PhaseIn1[t])+TruPosDAlgB2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("TruPosDAlgB",DIAG,sep=""))*PhaseIn2[t])
all.equal(FalsePosDB, (FalsPosDAlgB1*(1-PhaseIn1[t])+FalsPosDAlgB2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("FalsPosDAlgB",DIAG,sep=""))*PhaseIn2[t])
all.equal(FalsPosDB, (FalsPosDAlgB1*(1-PhaseIn1[t])+FalsPosDAlgB2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("FalsPosDAlgB",DIAG,sep=""))*PhaseIn2[t])
all.equal(VTestCostD, (VTestCostD1*(1-PhaseIn1[t])+VTestCostD2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("VTestCostD",DIAG,sep=""))*PhaseIn2[t])
all.equal(VTxCost,(VTxCost1*(1-PhaseIn1[t])+VTxCost2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("VTxCost",DIAG,sep=""))*PhaseIn2[t])
all.equal(GetXpt,(GetXpt1*(1-PhaseIn1[t])+GetXpt2*PhaseIn1[t])*(1-PhaseIn2[t]) +
get(paste("GetXpt",DIAG,sep=""))*PhaseIn2[t])
RateMat[a21]<-DTestt[t]*TruPosD[1:70*2-1]*rTstIn # From In to Tn1
RateMat[a22]<-NDTestt[t]*TruPosND[1:70*2-1]*rTstIn  # From In to Tn2
RateMat[a23]<-DTestt[t]*TruPosD[1:70*2]   # From Ip to Tp1
RateMat[a24]<-NDTestt[t]*TruPosND[1:70*2]   # From Ip to Tp2
### C8. HIV INCIDENCE and ART ENROLLMENT
# HIV incidence
RateMat[a25] <- rHIVt[t]
  Range = index + 1:nrow(a21)
  J[Range,] = a21
  # From In to Tn1
  X[Range] = DTestt[t] * TruPosD[1:70 * 2 - 1] * rTstIn
  index = tail(Range, 1)
  Range = index + 1:nrow(a22)
  J[Range,] = a22
  # From In to Tn2
  X[Range] = NDTestt[t] * TruPosND[1:70 * 2 - 1] * rTstIn
  index = tail(Range, 1)
  Range = index + 1:nrow(a23)
  J[Range,] = a23
  # From Ip to Tp1
  X[Range] = DTestt[t] * TruPosD[1:70 * 2]
  index = tail(Range, 1)
  Range = index + 1:nrow(a24)
  J[Range,] = a24
  # From Ip to Tp2
  X[Range] = NDTestt[t] * TruPosND[1:70 * 2]
  index = tail(Range, 1)
### C8. HIV INCIDENCE and ART ENROLLMENT
# HIV incidence
  Range = index + 1:nrow(a25)
  J[Range,] = a25
  X[Range] = rHIVt[t]
  index = tail(Range, 1)
RateMatOpt = sparseMatrix(J[,1], J[,2], x = X, dims = c(numComp, numComp), dimnames = list(StatNam, StatNam))
MatFull=as.matrix(RateMatOpt); all.equal(MatFull, RateMat)
dimnames(MatFull)=list(StatNam,StatNam)
all.equal(MatFull, RateMat)
firstInds  = 217:288
secondInds = 361:432
RMDiag  = RateMat[a46]
RMDiag1 = RMDiag[firstInds]
RMtemp1 = RateMat[firstInds,  ]
RMDiag2 = RMDiag[secondInds]
  RMtemp2 = RateMat[secondInds, ]
RMtemp <- RateMat; diag(RMtemp) <- 0
RMrowsum <- rowSums(RMtemp[c(217:288,361:432),])
OnTx <- sum(Vnext[c(145:216,289:360,433:504)])-sum(Vnext[c(145:216,289:360,433:504)]%*%(RateMat[c(145:216,289:360,433:504),-c(145:216,289:360,433:504)]/12))
TxNeed200 <- sum(Vnext[361:432])-sum(Vnext[361:432]%*%(RMtemp[361:432,]/12)) 
TxNeed350 <- sum(Vnext[217:288])-sum(Vnext[217:288]%*%(RMtemp[217:288,]/12))
all.equal(RMrowsum, c(rowSums(RMtemp1), rowSums(RMtemp2)) - c(RMDiag1, RMDiag2))
relInds = c(145:216, 289:360, 433:504)
all.equal(OnTx,sum(Vnext[relInds]) - sum(Vnext[relInds] %*% RateMat[relInds, -relInds]/12))
firstNext = Vnext[firstInds]; secondNext = Vnext[secondInds]
all.equal(TxNeed200, sum(firstNext)  - (sum(firstNext %*% RMtemp1)  - sum(firstNext  * RMDiag1)) / 12)
all.equal(TxNeed350, sum(firstNext)  - (sum(firstNext %*% RMtemp1)  - sum(firstNext  * RMDiag1)) / 12)
all.equal(TxNeed200, sum(secondNext) - (sum(secondNext %*% RMtemp2) - sum(secondNext * RMDiag2)) / 12)
TransMat<- RateMat/12  # uses the rates to approximate the probabilities (means that probabilities are independent) 
TransMat[a46] <- 1-(rowSums(TransMat)-TransMat[a46])
class(TransMat)
ptm=proc.time(); Vnext<- Vnext%*%TransMat; proc.time()-ptm
TransMatOpt = RateMatOpt/12
class(TransMatOpt)
TransMatOpt[a46] <- 1-(rowSums(TransMatOpt)-TransMatOpt[a46])
class(TransMatOpt)
length(TransMatOpt@x)
length(TransMatOpt@i)
badInds=which(TransMatOpt@x==0)
length(badInds)
ptm=proc.time(); VnextOpt =  Vnext%*%TransMatOpt; proc.time()-ptm
